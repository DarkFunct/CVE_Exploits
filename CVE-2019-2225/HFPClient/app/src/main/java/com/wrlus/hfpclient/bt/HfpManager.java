package com.wrlus.hfpclient.bt;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothProfile;
import android.content.Context;
import android.util.Log;

import com.wrlus.hfpclient.profile.BluetoothHiddenProfile;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Set;

public class HfpManager {
    private static final String TAG = "HfpManager";
    private static HfpManager instance;
    private BluetoothAdapter mBtAdapter;
    private BluetoothProfile mBtClient;
    private BluetoothDevice btDevice;
    private boolean isHfpEnable;

    public BluetoothDevice getBtDevice() {
        return btDevice;
    }

    public void setBtDevice(BluetoothDevice btDevice) {
        this.btDevice = btDevice;
    }

    private HfpManager(Context context) {
        mBtAdapter = BluetoothAdapter.getDefaultAdapter();
        isHfpEnable =mBtAdapter.getProfileProxy(context, new ServiceListener(), BluetoothHiddenProfile.HEADSET_CLIENT);
    }

    public static HfpManager getInstance(Context context) {
        if (instance == null) {
            synchronized (HfpManager.class) {
                if (instance == null) {
                    instance = new HfpManager(context);
                }
            }
        }
        return instance;
    }

    public boolean isHfpEnable() {
        return isHfpEnable;
    }

    public Set<BluetoothDevice> getBondedDevices() {
        return mBtAdapter.getBondedDevices();
    }

    public boolean connect() {
        if (mBtClient == null || btDevice == null) {
            return false;
        }
        try {
            Method method = Class.forName("android.bluetooth.BluetoothHeadsetClient")
                    .getDeclaredMethod("connect", BluetoothDevice.class);
            return (Boolean) method.invoke(mBtClient, btDevice);
        } catch (ClassNotFoundException | NoSuchMethodException e) {
            Log.e(TAG, "connect, ClassNotFoundException | NoSuchMethodException");
            e.printStackTrace();
        } catch (IllegalAccessException | InvocationTargetException e) {
            Log.e(TAG, "connect, IllegalAccessException | InvocationTargetException");
            e.printStackTrace();
        }
        return false;
    }

    public boolean acceptCall() {
        if (mBtClient == null || btDevice == null) {
            return false;
        }
        try {
            Method method = Class.forName("android.bluetooth.BluetoothHeadsetClient")
                    .getDeclaredMethod("acceptCall", BluetoothDevice.class, int.class);
            return (Boolean) method.invoke(mBtClient, btDevice, 0);
        } catch (ClassNotFoundException | NoSuchMethodException e) {
            Log.e(TAG, "connect, ClassNotFoundException | NoSuchMethodException");
            e.printStackTrace();
        } catch (IllegalAccessException | InvocationTargetException e) {
            Log.e(TAG, "connect, IllegalAccessException | InvocationTargetException");
            e.printStackTrace();
        }
        return false;
    }

    public boolean rejectCall() {
        if (mBtClient == null || btDevice == null) {
            return false;
        }
        try {
            Method method = Class.forName("android.bluetooth.BluetoothHeadsetClient")
                    .getDeclaredMethod("rejectCall", BluetoothDevice.class);
            return (Boolean) method.invoke(mBtClient, btDevice);
        } catch (ClassNotFoundException | NoSuchMethodException e) {
            Log.e(TAG, "connect, ClassNotFoundException | NoSuchMethodException");
            e.printStackTrace();
        } catch (IllegalAccessException | InvocationTargetException e) {
            Log.e(TAG, "connect, IllegalAccessException | InvocationTargetException");
            e.printStackTrace();
        }
        return false;
    }

    class ServiceListener implements BluetoothProfile.ServiceListener {

        @Override
        public void onServiceConnected(int profile, BluetoothProfile proxy) {
            Log.i(TAG, "onServiceConnected, profile="+profile);
            if (profile == BluetoothHiddenProfile.HEADSET_CLIENT) {
                mBtClient = proxy;
            }
        }

        @Override
        public void onServiceDisconnected(int profile) {
            Log.i(TAG, "onServiceDisconnected, profile="+profile);
        }
    }

}
