package cn.wrlu.btbondtest;

import androidx.appcompat.app.AppCompatActivity;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothHeadset;
import android.bluetooth.BluetoothProfile;
import android.content.IntentFilter;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class MainActivity extends AppCompatActivity {
    private static final String TAG = "BtBondTestMain";
//    xiaolu-pi4b-A
    private static final String BD_ADDR = "DC:A6:32:B7:20:10";
    private BluetoothAdapter mBtAdapter;
    private BluetoothHeadset mBtHandset;
    private SuperBtReceiver receiver;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Button button = findViewById(R.id.button);
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                start();
            }
        });
        registerBtReceiver();
        mBtAdapter = BluetoothAdapter.getDefaultAdapter();
        mBtAdapter.getProfileProxy(this, new ServiceListener(), BluetoothProfile.HEADSET);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        unregisterReceiver(receiver);
    }

    public void registerBtReceiver() {
        receiver = new SuperBtReceiver();
        IntentFilter filter = new IntentFilter();
        filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED);
        filter.addAction(BluetoothAdapter.ACTION_CONNECTION_STATE_CHANGED);
        registerReceiver(receiver, filter);
    }

    public void start() {
        final BluetoothDevice btDevice = getBtDevice(BD_ADDR);
        Thread bondThread = new Thread(new Runnable() {
            @Override
            public void run() {
                do {
                    if (btDevice.getBondState() != BluetoothDevice.BOND_BONDING) {
                        Log.d(TAG, "connectThread, try to create bond");
                        btDevice.createBond();
                    } else {
                        Log.d(TAG, "connectThread, during bonding, skipped");
                    }
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        Log.e(TAG, "connectThread, connect interrupted");
                    }
                } while (btDevice.getBondState() != BluetoothDevice.BOND_BONDED);
                Log.i(TAG, "connectThread, create bond OK");
                do {
                    if (mBtHandset.getConnectionState(btDevice) != BluetoothProfile.STATE_CONNECTING) {
                        Log.d(TAG, "connectThread, try to connect");
                        connect(btDevice);
                    } else {
                        Log.d(TAG, "connectThread, during connecting, skipped");
                    }
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        Log.e(TAG, "connectThread, connect interrupted");
                    }
                } while(mBtHandset.getConnectionState(btDevice) != BluetoothProfile.STATE_CONNECTED);
                Log.i(TAG, "connectThread, connect OK");
                connectAudio();
                do {
                    try {
                        Thread.sleep(3000);
                    } catch (InterruptedException e) {
                        Log.e(TAG, "connectThread, getConnectedDevices interrupted");
                    }
                } while(mBtHandset.getConnectionState(btDevice) == BluetoothProfile.STATE_CONNECTED);

            }
        });
        bondThread.setDaemon(true);
        bondThread.start();
    }

    public BluetoothDevice getBtDevice(String btAddress) {
        try {
            Constructor<BluetoothDevice> constructor = BluetoothDevice.class.getDeclaredConstructor(String.class);
            constructor.setAccessible(true);
            return constructor.newInstance(btAddress);
        } catch(NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException e) {
            Log.e(TAG, "NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException");
            e.printStackTrace();
        }
        return null;
    }

    public boolean connect(BluetoothDevice btDevice) {
        if (mBtHandset == null || btDevice == null) {
            return false;
        }
        try {
            Method method = BluetoothHeadset.class.getDeclaredMethod("connect", BluetoothDevice.class);
            return (Boolean) method.invoke(mBtHandset, btDevice);
        } catch (NoSuchMethodException e) {
            Log.e(TAG, "connect, ClassNotFoundException | NoSuchMethodException");
            e.printStackTrace();
        } catch (IllegalAccessException | InvocationTargetException e) {
            Log.e(TAG, "connect, IllegalAccessException | InvocationTargetException");
            e.printStackTrace();
        }
        return false;
    }

    public boolean connectAudio() {
        if (mBtHandset == null) {
            return false;
        }
        try {
            Method method = BluetoothHeadset.class.getDeclaredMethod("connectAudio");
            return (Boolean) method.invoke(mBtHandset);
        } catch (NoSuchMethodException e) {
            Log.e(TAG, "connectAudio, ClassNotFoundException | NoSuchMethodException");
            e.printStackTrace();
        } catch (IllegalAccessException | InvocationTargetException e) {
            Log.e(TAG, "connectAudio, IllegalAccessException | InvocationTargetException");
            e.printStackTrace();
        }
        return false;
    }
    class ServiceListener implements BluetoothProfile.ServiceListener {
        @Override
        public void onServiceConnected(int profile, BluetoothProfile proxy) {
            Log.i(TAG, "onServiceConnected, profile="+profile);
            if (profile == BluetoothProfile.HEADSET) {
                mBtHandset = (BluetoothHeadset) proxy;
            }
        }
        @Override
        public void onServiceDisconnected(int profile) {
            Log.i(TAG, "onServiceDisconnected, profile="+profile);
        }
    }
}